// Code generated by counterfeiter. DO NOT EDIT.
package v1fakes

import (
	"context"
	"sync"

	v1 "github.com/nginx/agent/v3/api/grpc/mpi/v1"
	"google.golang.org/grpc"
)

type FakeCommandServiceClient struct {
	CommandChannelStub        func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage], error)
	commandChannelMutex       sync.RWMutex
	commandChannelArgsForCall []struct {
		arg1 context.Context
		arg2 []grpc.CallOption
	}
	commandChannelReturns struct {
		result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage]
		result2 error
	}
	commandChannelReturnsOnCall map[int]struct {
		result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage]
		result2 error
	}
	GetFileStub        func(context.Context, *v1.GetFileRequest, ...grpc.CallOption) (*v1.GetFileResponse, error)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.GetFileRequest
		arg3 []grpc.CallOption
	}
	getFileReturns struct {
		result1 *v1.GetFileResponse
		result2 error
	}
	getFileReturnsOnCall map[int]struct {
		result1 *v1.GetFileResponse
		result2 error
	}
	UpdateFileStub        func(context.Context, *v1.UpdateFileRequest, ...grpc.CallOption) (*v1.UpdateFileResponse, error)
	updateFileMutex       sync.RWMutex
	updateFileArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.UpdateFileRequest
		arg3 []grpc.CallOption
	}
	updateFileReturns struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}
	updateFileReturnsOnCall map[int]struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandServiceClient) CommandChannel(arg1 context.Context, arg2 ...grpc.CallOption) (grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage], error) {
	fake.commandChannelMutex.Lock()
	ret, specificReturn := fake.commandChannelReturnsOnCall[len(fake.commandChannelArgsForCall)]
	fake.commandChannelArgsForCall = append(fake.commandChannelArgsForCall, struct {
		arg1 context.Context
		arg2 []grpc.CallOption
	}{arg1, arg2})
	stub := fake.CommandChannelStub
	fakeReturns := fake.commandChannelReturns
	fake.recordInvocation("CommandChannel", []interface{}{arg1, arg2})
	fake.commandChannelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) CommandChannelCallCount() int {
	fake.commandChannelMutex.RLock()
	defer fake.commandChannelMutex.RUnlock()
	return len(fake.commandChannelArgsForCall)
}

func (fake *FakeCommandServiceClient) CommandChannelCalls(stub func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage], error)) {
	fake.commandChannelMutex.Lock()
	defer fake.commandChannelMutex.Unlock()
	fake.CommandChannelStub = stub
}

func (fake *FakeCommandServiceClient) CommandChannelArgsForCall(i int) (context.Context, []grpc.CallOption) {
	fake.commandChannelMutex.RLock()
	defer fake.commandChannelMutex.RUnlock()
	argsForCall := fake.commandChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommandServiceClient) CommandChannelReturns(result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage], result2 error) {
	fake.commandChannelMutex.Lock()
	defer fake.commandChannelMutex.Unlock()
	fake.CommandChannelStub = nil
	fake.commandChannelReturns = struct {
		result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage]
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) CommandChannelReturnsOnCall(i int, result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage], result2 error) {
	fake.commandChannelMutex.Lock()
	defer fake.commandChannelMutex.Unlock()
	fake.CommandChannelStub = nil
	if fake.commandChannelReturnsOnCall == nil {
		fake.commandChannelReturnsOnCall = make(map[int]struct {
			result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage]
			result2 error
		})
	}
	fake.commandChannelReturnsOnCall[i] = struct {
		result1 grpc.BidiStreamingClient[v1.CommandMessage, v1.CommandMessage]
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) GetFile(arg1 context.Context, arg2 *v1.GetFileRequest, arg3 ...grpc.CallOption) (*v1.GetFileResponse, error) {
	fake.getFileMutex.Lock()
	ret, specificReturn := fake.getFileReturnsOnCall[len(fake.getFileArgsForCall)]
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.GetFileRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetFileStub
	fakeReturns := fake.getFileReturns
	fake.recordInvocation("GetFile", []interface{}{arg1, arg2, arg3})
	fake.getFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *FakeCommandServiceClient) GetFileCalls(stub func(context.Context, *v1.GetFileRequest, ...grpc.CallOption) (*v1.GetFileResponse, error)) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = stub
}

func (fake *FakeCommandServiceClient) GetFileArgsForCall(i int) (context.Context, *v1.GetFileRequest, []grpc.CallOption) {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	argsForCall := fake.getFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommandServiceClient) GetFileReturns(result1 *v1.GetFileResponse, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	fake.getFileReturns = struct {
		result1 *v1.GetFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) GetFileReturnsOnCall(i int, result1 *v1.GetFileResponse, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	if fake.getFileReturnsOnCall == nil {
		fake.getFileReturnsOnCall = make(map[int]struct {
			result1 *v1.GetFileResponse
			result2 error
		})
	}
	fake.getFileReturnsOnCall[i] = struct {
		result1 *v1.GetFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) UpdateFile(arg1 context.Context, arg2 *v1.UpdateFileRequest, arg3 ...grpc.CallOption) (*v1.UpdateFileResponse, error) {
	fake.updateFileMutex.Lock()
	ret, specificReturn := fake.updateFileReturnsOnCall[len(fake.updateFileArgsForCall)]
	fake.updateFileArgsForCall = append(fake.updateFileArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.UpdateFileRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateFileStub
	fakeReturns := fake.updateFileReturns
	fake.recordInvocation("UpdateFile", []interface{}{arg1, arg2, arg3})
	fake.updateFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandServiceClient) UpdateFileCallCount() int {
	fake.updateFileMutex.RLock()
	defer fake.updateFileMutex.RUnlock()
	return len(fake.updateFileArgsForCall)
}

func (fake *FakeCommandServiceClient) UpdateFileCalls(stub func(context.Context, *v1.UpdateFileRequest, ...grpc.CallOption) (*v1.UpdateFileResponse, error)) {
	fake.updateFileMutex.Lock()
	defer fake.updateFileMutex.Unlock()
	fake.UpdateFileStub = stub
}

func (fake *FakeCommandServiceClient) UpdateFileArgsForCall(i int) (context.Context, *v1.UpdateFileRequest, []grpc.CallOption) {
	fake.updateFileMutex.RLock()
	defer fake.updateFileMutex.RUnlock()
	argsForCall := fake.updateFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCommandServiceClient) UpdateFileReturns(result1 *v1.UpdateFileResponse, result2 error) {
	fake.updateFileMutex.Lock()
	defer fake.updateFileMutex.Unlock()
	fake.UpdateFileStub = nil
	fake.updateFileReturns = struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) UpdateFileReturnsOnCall(i int, result1 *v1.UpdateFileResponse, result2 error) {
	fake.updateFileMutex.Lock()
	defer fake.updateFileMutex.Unlock()
	fake.UpdateFileStub = nil
	if fake.updateFileReturnsOnCall == nil {
		fake.updateFileReturnsOnCall = make(map[int]struct {
			result1 *v1.UpdateFileResponse
			result2 error
		})
	}
	fake.updateFileReturnsOnCall[i] = struct {
		result1 *v1.UpdateFileResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commandChannelMutex.RLock()
	defer fake.commandChannelMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.updateFileMutex.RLock()
	defer fake.updateFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.CommandServiceClient = new(FakeCommandServiceClient)
